#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform writeonly image2DArray resultImage;

#define EPSILON 0.0000
#define MAXLEN 1000.0




layout (binding = 1) uniform UBO 
{
	vec3 lightPos;
	float aspectRatio;
	vec2 rayOffset;
	vec2 pad;
	vec3 pos;
	int currentLayer;
	vec3 lookat;
	float fov;
} ubo;

struct Sphere 
{
	vec3 pos;
	float radius;
	vec3 diffuse;
	int id;
};

struct Plane
{
	vec3 normal;
	float distance;
	vec3 diffuse;
	int id;
};

struct Triangle
{
	vec3 p1;
	int id;
	vec3 p2;
	float specular;
	vec3 p3;
	int pad1;
	vec3 normal;
	int pad2;
	vec3 diffuse;
};

struct HitInfo
{
	vec3 normal;
	float t;
	vec3 position;
	int id;
};

struct Ray
{
	vec3 origin;
	vec3 dir;
	vec3 color;
};

layout (std140, binding = 2) buffer Spheres
{
	Sphere spheres[ ];
};

layout (std140, binding = 3) buffer Planes
{
	Plane planes[ ];
};

layout (std140, binding = 4) buffer Triangles
{
	Triangle triangles[ ];
};

layout (binding = 5) uniform samplerCube samplerCubeMap;

void reflectRay(inout vec3 rayD, in vec3 mormal)
{
	rayD = rayD + 2.0 * -dot(mormal, rayD) * mormal;
}


float sphereIntersect(in vec3 rayO, in vec3 rayD, in Sphere sphere)
{
	vec3 oc = rayO - sphere.pos;
	float b = 2.0 * dot(oc, rayD);
	float c = dot(oc, oc) - sphere.radius*sphere.radius;
	float h = b*b - 4.0*c;
	if (h < 0.0) 
	{
		return -1.0;
	}
	float t = (-b - sqrt(h)) / 2.0;

	return t;
}

vec3 sphereNormal(in vec3 pos, in Sphere sphere)
{
	return (pos - sphere.pos) / sphere.radius;
}


float planeIntersect(vec3 rayO, vec3 rayD, Plane plane)
{
	float d = dot(rayD, plane.normal);

	if (d == 0.0)
		return 0.0;

	float t = -(plane.distance + dot(rayO, plane.normal)) / d;

	if (t < 0.0)
		return 0.0;

	return t;
}

float triangleIntersect(vec3 rayO, vec3 rayD, Triangle triangle)
{
	//using Möller–Trumbore intersection algorithm
	//https://en.wikipedia.org/wiki/Möller–Trumbore_intersection_algorithm
    vec3 edge1, edge2, h, s, q;
    float a,f,u,v;
    edge1 = triangle.p2 - triangle.p1;
    edge2 = triangle.p3 - triangle.p1;
    h = cross(rayD, edge2);
    a = dot(edge1, h);
    if (a > -EPSILON && a < EPSILON)
        return -1;    // This ray is parallel to this triangle.
    f = 1.0/a;
    s = rayO - triangle.p1;
    u = f * dot(s, h);
    if (u < 0.0 || u > 1.0)
        return -1;
    q = cross(s, edge1);
    v = f * dot(rayD, q);
    if (v < 0.0 || u + v > 1.0)
        return -1;
    // At this stage we can compute t to find out where the intersection point is on the line.
    float t = f * dot(edge2, q);
    if (t > EPSILON) // ray intersection
    {
        return t;
    }
    else // This means that there is a line intersection but not a ray intersection.
        return -1;
}

	
HitInfo intersect(in Ray ray, in float maxT)
{
	HitInfo hitInfo;
	hitInfo.t = maxT;
	hitInfo.id = -1;


	for (int i = 0; i < spheres.length(); i++)
	{
		float tSphere = sphereIntersect(ray.origin, ray.dir, spheres[i]);
		if ((tSphere > EPSILON) && (tSphere < hitInfo.t))
		{
			hitInfo.id = spheres[i].id;
			hitInfo.position = ray.origin + tSphere * ray.dir;
			hitInfo.normal = sphereNormal(hitInfo.position, spheres[i]);
			hitInfo.t = tSphere;
		}
	}	

	for (int i = 0; i < planes.length(); i++)
	{
		float tplane = planeIntersect(ray.origin, ray.dir, planes[i]);
		if ((tplane > EPSILON) && (tplane < hitInfo.t))
		{
			hitInfo.id = planes[i].id;
			hitInfo.position = ray.origin + tplane * ray.dir;
			hitInfo.normal = planes[i].normal;
			hitInfo.t = tplane;
		}	
	}

	//for(int i = 0; i < triangles.length(); i++)
	//{
	//	float tTriangle = triangleIntersect(rayO, rayD, triangles[i]);
	//	if((tTriangle > EPSILON) && (tTriangle < resT))
	//	{
	//		id = triangles[i].id;
	//		resT = tTriangle;
	//	}
	//}
	
	return hitInfo;
}


vec3 Color(int id)
{
	for(int i= 0; i < spheres.length(); i++)
	{
		if(spheres[i].id == id)
			return spheres[i].diffuse;			
	}

	for(int i= 0; i < planes.length(); i++)
	{
		if(planes[i].id == id)
			return planes[i].diffuse;			
	}
	return vec3(0.f, 0.f, 0.f);
}

vec3 Shade(inout Ray ray, HitInfo hit)
{
	if(hit.t < MAXLEN)
	{
		vec3 specular = vec3(0.6f, 0.6f, 0.6f);

		ray.origin = hit.position + hit.normal * 0.001f;
		ray.dir = reflect(ray.dir, hit.normal);
		ray.color *= specular;

		return vec3(0.f, 0.f, 0.f);
	}
	else
	{
		ray.color = vec3(0.f, 0.f, 0.f);
		//ivec3 dim = imageSize(resultImage);
		//vec2 uv = vec2(gl_GlobalInvocationID.xy+ubo.rayOffset) / dim.xy;
		//vec3 color = vec3(0.4f, 0.5f, 0.9f);
		//return mix(color, vec3(1.f, 1.f, 1.f), 1-uv.y);
		return texture(samplerCubeMap, vec3(ray.dir.x, -ray.dir.y, ray.dir.z)).xyz;
	}
}

void main()
{
	ivec3 dim = imageSize(resultImage);
	vec2 uv = vec2(gl_GlobalInvocationID.xy+ubo.rayOffset) / dim.xy;
	Ray ray;
	ray.origin = ubo.pos;
	ray.dir = normalize(vec3((-1.0 + 2.0 * uv) * vec2(ubo.aspectRatio, 1.0), -1.0));
	ray.color = vec3(1.f, 1.f, 1.f);

	vec3 finalColor = vec3(0.f, 0.f, 0.f);

	int nrOfBounces = 8;
	for(int i = 0; i < 8; ++i)
	{
		HitInfo hit = intersect(ray, MAXLEN);
		finalColor += ray.color * Shade(ray, hit);

		if(!any(greaterThan(ray.color, vec3(0.f, 0.f, 0.f))))
			break;
	}

	imageStore(resultImage, ivec3(gl_GlobalInvocationID.xy, ubo.currentLayer), vec4(finalColor, 0.0));
}